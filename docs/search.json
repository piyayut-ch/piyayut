[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Piyayut Chitchumnong",
    "section": "",
    "text": "Piyayut is an economist, data scientist and data engineer at National Agricultural Center, Office of Agricultural Economics."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Piyayut Chitchumnong",
    "section": "Education",
    "text": "Education\nMichigan State University | East Lansing, MI\nM.S. Agricultural, Food, and Resource Economics | 2011 - 2015\nChulalongkorn University | Bangkok, Thailand\nM.A in International Economics and Finance | 2010 - 2011\nThammasat University | Bangkok, Thailand\nB.A in Economics | Sep 2007 - June 2011"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Piyayut Chitchumnong",
    "section": "Experience",
    "text": "Experience\nOffice of Agricultural Economics | Economist | 2015 - present\nToyota Motor Asia Pacific | HR Specialist | 2007 - 2010"
  },
  {
    "objectID": "about.html#skill",
    "href": "about.html#skill",
    "title": "Piyayut Chitchumnong",
    "section": "Skill",
    "text": "Skill\n\nStatistics and Econometrics: Cross-section Data, Panel Data, Time-series Data\nR: tidyverse, ggplot2, shiny, rmarkdown, etc.\npython: numpy, scipy, pandas, scikitlearn, keras, etc.\nSQL\nDocker"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Piyayut’s Blog",
    "section": "",
    "text": "tutorial\n\n\nR\n\n\necharts\n\n\ndata-visualization\n\n\nanimation\n\n\n\n\nA walkthrough of how to make the animated gapminder chart using R and echarts.\n\n\n\n\n\n\nJul 30, 2022\n\n\nPiyayut Chitchumnong\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ntutorial\n\n\nR\n\n\npython\n\n\ndata-manipulation\n\n\ndata-wraning\n\n\ndata-transformation\n\n\n\n\nA code snippet to how to implement basic data manipulation using R and python.\n\n\n\n\n\n\nJul 28, 2022\n\n\nPiyayut Chitchumnong\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nquarto\n\n\ntutorial\n\n\n\n\nA quick tutorial on how to create a personal blog using quarto.\n\n\n\n\n\n\nJul 9, 2022\n\n\nPiyayut Chitchumnong\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2022-07-09_quarto-blog/index.html#install-quarto",
    "href": "posts/2022-07-09_quarto-blog/index.html#install-quarto",
    "title": "How to create a personal blog using Quarto",
    "section": "Install quarto",
    "text": "Install quarto\nDownload the installer from this link and install the program. Next select your editor tools i.e. VSCode or Jupyter or Rstudio. In this tutorial, I use VScode. For user who use other tools, you still can follow this tutorial, just to be careful about the path."
  },
  {
    "objectID": "posts/2022-07-09_quarto-blog/index.html#create-new-project",
    "href": "posts/2022-07-09_quarto-blog/index.html#create-new-project",
    "title": "How to create a personal blog using Quarto",
    "section": "Create new project",
    "text": "Create new project\n\nCreate a new folder for your project and rename as you will.\nGo to the folder and open VScode.\nOpen Extension and install Quarto extension. This extension will help us working with quarto i.e. syntax highligh, execution buttons, etc.\nOpen new terminal, and create a new project using quarto command as follows\n\nquarto create-project --type website:blog\nNote:\n\nthe command is slightly different the official document where we do not specify folder name since we are already in the folder.\nargument --type website:blog is used to create a folder with necessary files for a blog website. We will go and edit one by one.\n\nImportant files are:\n\n_quarto.yml a config for whole website i.e. title, format, navbar\nindex.qml landing page.\n\nabout.qml about page.\n\nstyles.css a css file for styling the website.\n\npost a folder post contains all posts.\n\n_metadata.yml a metadata used for all posts.\n\n\nPreview the blog using bash command\n# make sure that you are in the project root folder\nquarto preview"
  },
  {
    "objectID": "posts/2022-07-09_quarto-blog/index.html#edit-_quarto.yml",
    "href": "posts/2022-07-09_quarto-blog/index.html#edit-_quarto.yml",
    "title": "How to create a personal blog using Quarto",
    "section": "Edit _quarto.yml",
    "text": "Edit _quarto.yml\n_quarto.yml is a yml config file for overall blog’s behavior. The defaults config is sufficient, but you can further customize and add functionalities of your blog i.e. add favicon, select search mode, customize navbar, add google analytics, etc. For greater details, please see official documents\n\nhttps://quarto.org/docs/websites/website-tools.html\n\nhttps://quarto.org/docs/websites/website-search.html\n\n# _quarto.yml\n# the rest metadata is suppressed for brevity\nproject:\n  type: website\n\nwebsite:\n  title: <TITLE>\n  favicon: <PATH TO FILE>\n  search: true\n  navbar:\n    right:\n      - text: \"About\"\n        href: about.qmd\n      - icon: github\n        href: <LINK>"
  },
  {
    "objectID": "posts/2022-07-09_quarto-blog/index.html#edit-index.qmd",
    "href": "posts/2022-07-09_quarto-blog/index.html#edit-index.qmd",
    "title": "How to create a personal blog using Quarto",
    "section": "Edit index.qmd",
    "text": "Edit index.qmd\nindex.qmd file located at the root of project is a landing page for all blog posts. Basically, it is a .qmd file with only metadata and no content. Please see link for more details.\n---\n# index.qmd\n# the rest metadata is suppressed for brevity\ntitle: <TITLE>\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: default\n  categories: true\n  sort-ui: false\n  filter-ui: false\npage-layout: full\ntitle-block-banner: true\n---"
  },
  {
    "objectID": "posts/2022-07-09_quarto-blog/index.html#edit-about.qmd",
    "href": "posts/2022-07-09_quarto-blog/index.html#edit-about.qmd",
    "title": "How to create a personal blog using Quarto",
    "section": "Edit about.qmd",
    "text": "Edit about.qmd\nabout.qmd is a .qmd for simple about page. We can change title, image, template social media link in metadata section. In general, I recommend to put the image file in the same folder as .qmd file in this case is the project’s root. For template, there are 5 options to choose from which are jolla, trestles, solana, marquee, broadside. Choose the one you like. Next edit your social media information i.e. twitter account, linkedin or github.\nThe body of about page i.e. desicription, education, work experience, skill, etc. can be edited as normal markdown file. See the official document for more details.\n# about.qmd\n# the rest metadata is suppressed for brevity\n---\ntitle: <TITLE>\nabout:\n  template: jolla # jolla trestles, solana, marquee, broadside \n  image: profile.jpg\n  links:\n    - icon: twitter\n      text: twitter\n      href: https://twitter.com\n    - icon: github\n      text: Github\n      href: https://github.com\n---\n\nPut all information as you need ...\n\n## Education\n...\n\n## Work Experience\n...\n\n## Skill\n..."
  },
  {
    "objectID": "posts/2022-07-09_quarto-blog/index.html#edit-_metadata.yml",
    "href": "posts/2022-07-09_quarto-blog/index.html#edit-_metadata.yml",
    "title": "How to create a personal blog using Quarto",
    "section": "Edit _metadata.yml",
    "text": "Edit _metadata.yml\n._metadata.yml is a yml file that will be used in every .qmd files under the same folder. This will be a good place to set global or common parameters in metadata section."
  },
  {
    "objectID": "posts/2022-07-09_quarto-blog/index.html#activate-preview-mode",
    "href": "posts/2022-07-09_quarto-blog/index.html#activate-preview-mode",
    "title": "How to create a personal blog using Quarto",
    "section": "Activate preview mode",
    "text": "Activate preview mode\nwe can preview our entire blog by running quarto cli command.\nquarto preview\nI recommend to run this command when we working on the project. This is good for interactive purpose as quarto will re-render every time you save a file and we can see the changes thruogh the browser. However, when we finish editing, we need to render before publishg the website as discussed later."
  },
  {
    "objectID": "posts/2022-07-09_quarto-blog/index.html#create-a-blog-post",
    "href": "posts/2022-07-09_quarto-blog/index.html#create-a-blog-post",
    "title": "How to create a personal blog using Quarto",
    "section": "Create a blog post",
    "text": "Create a blog post\nTo add a new post\n\nCreate a folder under the posts folder. I recommend to use a date time slug followed by a breif description.\n\nCreate a filename index.qmd. Note other formats .md, .rmd, .ipynb should work also.\n\nEdit index.qmd both metadata and body.\n\n# a .qmd file: metadata\n# the rest metadata is suppressed for brevity\n---\ntitle: \"How to create a personal blog using Quarto\"\nauthor: \"Piyayut Chitchumnong\"\ndescription: | \n  A quick tutorial on how to create a personal blog using quarto.\ndate: \"2022-07-09\"\ncategories: [quarto, tutorial]\n---\n\nIt is a good practice for having a cover picture. We can accomplish this by\n\nput an image file in the same folder of the post.\nrename the image as feature.png or feature.jpg.\nuse ![](<FILENAME>) in the top of body section"
  },
  {
    "objectID": "posts/2022-07-09_quarto-blog/index.html#edit-css-and-theme",
    "href": "posts/2022-07-09_quarto-blog/index.html#edit-css-and-theme",
    "title": "How to create a personal blog using Quarto",
    "section": "Edit css and theme",
    "text": "Edit css and theme\nWhen the project was initialized, default theme is cosmo and css used is styles.css which is a blank css file. We can adjust our blog’s look and feel by changing theme and edit styles.css.\n# default _quarto.yml\n# the rest metadata is suppressed for brevity\n---\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n---\n\ntheme: There are 25 built-in theme. Please see bootswatch for preview. We can change them by editing _quarto.yml\n\n# _quarto.yml\n# the rest metadata is suppressed for brevity\n---\nformat:\n  html:\n    theme: sandstone\n    css: styles.css\n---\n\ncss: For advance css users, the blog’s look can be further fine-tune by editting styles.css file. One common way to use css is to use custom fonts. In this case, I use google font that support Thai fonts. The file styles.css is editted as follows\n\n/* editted styles.css */\n@import url('https://fonts.googleapis.com/css2?family=Athiti:wght@700&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Bai+Jamjuree:wght@400&display=swap');\n\nbody{\n  font-family: 'Bai Jamjuree', sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: 'Athiti', sans-serif;\n}"
  },
  {
    "objectID": "posts/2022-07-09_quarto-blog/index.html#create-new-listing-page",
    "href": "posts/2022-07-09_quarto-blog/index.html#create-new-listing-page",
    "title": "How to create a personal blog using Quarto",
    "section": "Create new listing page",
    "text": "Create new listing page\nThe default gives you two pages: blog listing page and about page. However, you can add new page i.e. projects or talk page by following:\n\nCreate a new folder at the root i.e. projects or talks\n\nCreate a new .qmd file i.e. projects.qmd\n\nEdit .qmd as a listing page as you wish\n\nEdit _quarto.yml to include the new page in navbar.\n\n\n# _quarto.yml\n# the rest metadata is suppressed for brevity\nwebsite:\n  navbar:\n    right:\n      - text: \"Projects\"\n        href: projects.qmd\n\nCreate a new post (subfolder) for each project using .qmd file under the new folder. Similar way to create a post."
  },
  {
    "objectID": "posts/2022-07-09_quarto-blog/index.html#add-comments",
    "href": "posts/2022-07-09_quarto-blog/index.html#add-comments",
    "title": "How to create a personal blog using Quarto",
    "section": "Add comments",
    "text": "Add comments\nWe can allow reader to comment or share their thoughts on our blog. There are 3 methods supported by quarto: Hypothes.is, Utterances and Giscus. We adopt utterances due to its simplicity. We just need a github repo. To activate comment widget, we edit _quarto.yml by adding our github repo as example below. The github repo is simply used as a storage of user comments in issues section. See link for more details of all three methods.\n# _quarto.yml\n# the rest metadata is suppressed for brevity\nwebsite:\n  comments:\n    utterances:\n      repo: <github-repo>"
  },
  {
    "objectID": "posts/2022-07-28_data_manipulation_basic/index.html",
    "href": "posts/2022-07-28_data_manipulation_basic/index.html",
    "title": "Grammar of Data Manipulation in R and python",
    "section": "",
    "text": "Source: Photo by Engin Akyurt https://unsplash.com/photos/tYXBfhpZA1k"
  },
  {
    "objectID": "posts/2022-07-28_data_manipulation_basic/index.html#csv",
    "href": "posts/2022-07-28_data_manipulation_basic/index.html#csv",
    "title": "Grammar of Data Manipulation in R and python",
    "section": "4.1 csv",
    "text": "4.1 csv\nCSV is a text file that each columns are seperated by commas stored in .csv file extension. Aside from csv, there are similar text file that store spreadsheet data but used different seperator or fixed width to determine column by position. gapminder.csv file can be downloaded here.\n\nRpython\n\n\nWe use function read_csv from readr package.\n\ngapminder <- read_csv(\"gapminder.csv\", show_col_types = FALSE)\n# you can use file path in your local machine or url path.\ngapminder\n\n#> # A tibble: 1,704 × 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Afghanistan Asia       1957    30.3  9240934      821.\n#>  3 Afghanistan Asia       1962    32.0 10267083      853.\n#>  4 Afghanistan Asia       1967    34.0 11537966      836.\n#>  5 Afghanistan Asia       1972    36.1 13079460      740.\n#>  6 Afghanistan Asia       1977    38.4 14880372      786.\n#>  7 Afghanistan Asia       1982    39.9 12881816      978.\n#>  8 Afghanistan Asia       1987    40.8 13867957      852.\n#>  9 Afghanistan Asia       1992    41.7 16317921      649.\n#> 10 Afghanistan Asia       1997    41.8 22227415      635.\n#> # … with 1,694 more rows\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote <- is convention assignment in R, but = can also be used.\n\n\n\n\n\ngapminder = pd.read_csv(\"gapminder.csv\")\ngapminder\n\n#>           country continent  year  lifeExp       pop   gdpPercap\n#> 0     Afghanistan      Asia  1952   28.801   8425333  779.445314\n#> 1     Afghanistan      Asia  1957   30.332   9240934  820.853030\n#> 2     Afghanistan      Asia  1962   31.997  10267083  853.100710\n#> 3     Afghanistan      Asia  1967   34.020  11537966  836.197138\n#> 4     Afghanistan      Asia  1972   36.088  13079460  739.981106\n#> ...           ...       ...   ...      ...       ...         ...\n#> 1699     Zimbabwe    Africa  1987   62.351   9216418  706.157306\n#> 1700     Zimbabwe    Africa  1992   60.377  10704340  693.420786\n#> 1701     Zimbabwe    Africa  1997   46.809  11404948  792.449960\n#> 1702     Zimbabwe    Africa  2002   39.989  11926563  672.038623\n#> 1703     Zimbabwe    Africa  2007   43.487  12311143  469.709298\n#> \n#> [1704 rows x 6 columns]"
  },
  {
    "objectID": "posts/2022-07-28_data_manipulation_basic/index.html#excel",
    "href": "posts/2022-07-28_data_manipulation_basic/index.html#excel",
    "title": "Grammar of Data Manipulation in R and python",
    "section": "4.2 excel",
    "text": "4.2 excel\nMS excel is a spreadsheet program and store data in .xls (2003 version and before) or .xlsx. They are not text files like csv, but they are a kind of binary files (XML-like) format. An excel file can contain multiple sheets and within each sheet can have multiple tables. gapminder.xlsx file can be downloaded here.\n\n\n\n\n\n\nTip\n\n\n\nUnstructured excel files are difficult to work with using programming. Excel are still widely used by many organizations, so at leaset, we should convince users to make a proper spreadsheet for example follow Broman and Woo’ guideline.\n\n\n\nRpython\n\n\nWe use function read_excel from readxl package. As an excel file can have multiple worksheets, we can read one sheet at a time and we can specify sheet to import using sheet argument where it could be index or sheet name.\n\nread fist sheet.\n\n\ngapminder <- read_excel(\"gapminder.xlsx\")\ngapminder\n\n#> # A tibble: 1,704 × 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Afghanistan Asia       1957    30.3  9240934      821.\n#>  3 Afghanistan Asia       1962    32.0 10267083      853.\n#>  4 Afghanistan Asia       1967    34.0 11537966      836.\n#>  5 Afghanistan Asia       1972    36.1 13079460      740.\n#>  6 Afghanistan Asia       1977    38.4 14880372      786.\n#>  7 Afghanistan Asia       1982    39.9 12881816      978.\n#>  8 Afghanistan Asia       1987    40.8 13867957      852.\n#>  9 Afghanistan Asia       1992    41.7 16317921      649.\n#> 10 Afghanistan Asia       1997    41.8 22227415      635.\n#> # … with 1,694 more rows\n\n\n\nread second sheet.\n\n\ncountry_codes <- read_excel(\"gapminder.xlsx\", sheet = 2)\ncountry_codes\n\n#> # A tibble: 187 × 3\n#>    country     iso_alpha iso_num\n#>    <chr>       <chr>       <dbl>\n#>  1 Afghanistan AFG             4\n#>  2 Albania     ALB             8\n#>  3 Algeria     DZA            12\n#>  4 Angola      AGO            24\n#>  5 Argentina   ARG            32\n#>  6 Armenia     ARM            51\n#>  7 Aruba       ABW           533\n#>  8 Australia   AUS            36\n#>  9 Austria     AUT            40\n#> 10 Azerbaijan  AZE            31\n#> # … with 177 more rows\n\n\n\n\n\n\n\n\nNote\n\n\n\nIndex in R starts with 1.\n\n\n\n\npandas has a function read_excel to import excel files.\n\nread fist sheet.\n\n\ngapminder = pd.read_excel(\"gapminder.xlsx\")\ngapminder\n\n#>           country continent  year  lifeExp       pop   gdpPercap\n#> 0     Afghanistan      Asia  1952   28.801   8425333  779.445314\n#> 1     Afghanistan      Asia  1957   30.332   9240934  820.853030\n#> 2     Afghanistan      Asia  1962   31.997  10267083  853.100710\n#> 3     Afghanistan      Asia  1967   34.020  11537966  836.197138\n#> 4     Afghanistan      Asia  1972   36.088  13079460  739.981106\n#> ...           ...       ...   ...      ...       ...         ...\n#> 1699     Zimbabwe    Africa  1987   62.351   9216418  706.157306\n#> 1700     Zimbabwe    Africa  1992   60.377  10704340  693.420786\n#> 1701     Zimbabwe    Africa  1997   46.809  11404948  792.449960\n#> 1702     Zimbabwe    Africa  2002   39.989  11926563  672.038623\n#> 1703     Zimbabwe    Africa  2007   43.487  12311143  469.709298\n#> \n#> [1704 rows x 6 columns]\n\n\n\nread second sheet\n\n\ncountry_codes = pd.read_excel(\"gapminder.xlsx\", sheet_name = 1)\ncountry_codes\n\n#>                 country iso_alpha  iso_num\n#> 0           Afghanistan       AFG        4\n#> 1               Albania       ALB        8\n#> 2               Algeria       DZA       12\n#> 3                Angola       AGO       24\n#> 4             Argentina       ARG       32\n#> ..                  ...       ...      ...\n#> 182             Vietnam       VNM      704\n#> 183  West Bank and Gaza       PSE      275\n#> 184         Yemen, Rep.       YEM      887\n#> 185              Zambia       ZMB      894\n#> 186            Zimbabwe       ZWE      716\n#> \n#> [187 rows x 3 columns]\n\n\n\n\n\n\n\n\nNote\n\n\n\nIndex in python starts with 0."
  },
  {
    "objectID": "posts/2022-07-28_data_manipulation_basic/index.html#parquet",
    "href": "posts/2022-07-28_data_manipulation_basic/index.html#parquet",
    "title": "Grammar of Data Manipulation in R and python",
    "section": "4.3 parquet",
    "text": "4.3 parquet\nParquet is an open file format that is great for speed and storage. Some organizeations have changed the way they sharing their data files to parquet instead of csv. gapminder.parquet file can be downloaded here.\n\nRpython\n\n\nWe use function read_parquet from arrow package.\n\ngapminder <- read_parquet(\"gapminder.parquet\")\ngapminder\n\n#> # A tibble: 1,704 × 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Afghanistan Asia       1957    30.3  9240934      821.\n#>  3 Afghanistan Asia       1962    32.0 10267083      853.\n#>  4 Afghanistan Asia       1967    34.0 11537966      836.\n#>  5 Afghanistan Asia       1972    36.1 13079460      740.\n#>  6 Afghanistan Asia       1977    38.4 14880372      786.\n#>  7 Afghanistan Asia       1982    39.9 12881816      978.\n#>  8 Afghanistan Asia       1987    40.8 13867957      852.\n#>  9 Afghanistan Asia       1992    41.7 16317921      649.\n#> 10 Afghanistan Asia       1997    41.8 22227415      635.\n#> # … with 1,694 more rows\n\n\n\n\npandas has a function read_parquet to import excel files.\n\ngapminder = pd.read_parquet(\"gapminder.parquet\")\ngapminder\n\n#>           country continent  year  lifeExp       pop   gdpPercap\n#> 0     Afghanistan      Asia  1952   28.801   8425333  779.445314\n#> 1     Afghanistan      Asia  1957   30.332   9240934  820.853030\n#> 2     Afghanistan      Asia  1962   31.997  10267083  853.100710\n#> 3     Afghanistan      Asia  1967   34.020  11537966  836.197138\n#> 4     Afghanistan      Asia  1972   36.088  13079460  739.981106\n#> ...           ...       ...   ...      ...       ...         ...\n#> 1699     Zimbabwe    Africa  1987   62.351   9216418  706.157306\n#> 1700     Zimbabwe    Africa  1992   60.377  10704340  693.420786\n#> 1701     Zimbabwe    Africa  1997   46.809  11404948  792.449960\n#> 1702     Zimbabwe    Africa  2002   39.989  11926563  672.038623\n#> 1703     Zimbabwe    Africa  2007   43.487  12311143  469.709298\n#> \n#> [1704 rows x 6 columns]"
  },
  {
    "objectID": "posts/2022-07-28_data_manipulation_basic/index.html#without-group",
    "href": "posts/2022-07-28_data_manipulation_basic/index.html#without-group",
    "title": "Grammar of Data Manipulation in R and python",
    "section": "9.1 without group",
    "text": "9.1 without group\nWe want to find population total and population mean (in millions) of all countries and from 1952 - 2007.\n\nRpython\n\n\nWe use summarize or summarise from dplyr package. It can use to make multiple summarized variables in single function call.\n\ngapminder |> summarize(\n  pop_total_m = sum(pop)/1e6,\n  pop_mean_m = mean(pop)/1e6\n  )\n\n#> # A tibble: 1 × 2\n#>   pop_total_m pop_mean_m\n#>         <dbl>      <dbl>\n#> 1      50440.       29.6\n\n\n\n\nWe use assign method from pandas package. Alternative approach is to compute each summarization.\n\ngapminder[\"pop\"].agg([\"sum\", \"mean\"])/1e6\n\n# alternative\n\n#> sum     50440.465801\n#> mean       29.601212\n#> Name: pop, dtype: float64\n\ngapminder[\"pop\"].sum()/1e6\n\n#> 50440.465801\n\ngapminder[\"pop\"].mean()/1e6\n\n#> 29.601212324530515"
  },
  {
    "objectID": "posts/2022-07-28_data_manipulation_basic/index.html#by-groups",
    "href": "posts/2022-07-28_data_manipulation_basic/index.html#by-groups",
    "title": "Grammar of Data Manipulation in R and python",
    "section": "9.2 by groups",
    "text": "9.2 by groups\nWe want to find population total and population mean (in millions) of all countries and from 1952 - 2007.\n\nRpython\n\n\nWe use group_by from dplyr package before use summarize function. The result is grouped dataframe. I normally ungroup it to normal dataframe.\n\ngapminder |>\n  group_by(continent, year) |>\n  summarize(\n    pop_min_m = min(pop)/1e6,\n    pop_max_m = max(pop)/1e6\n  ) |> ungroup()\n\n#> # A tibble: 60 × 4\n#>    continent  year pop_min_m pop_max_m\n#>    <fct>     <int>     <dbl>     <dbl>\n#>  1 Africa     1952    0.0600      33.1\n#>  2 Africa     1957    0.0613      37.2\n#>  3 Africa     1962    0.0653      41.9\n#>  4 Africa     1967    0.0708      47.3\n#>  5 Africa     1972    0.0766      53.7\n#>  6 Africa     1977    0.0868      62.2\n#>  7 Africa     1982    0.0986      73.0\n#>  8 Africa     1987    0.111       81.6\n#>  9 Africa     1992    0.126       93.4\n#> 10 Africa     1997    0.146      106. \n#> # … with 50 more rows\n\n\n\n\nWe use groupby method from pandas package by putting it before agg method.\n\ngapminder.groupby(by=[\"continent\", \"year\"])[\"pop\"].agg([\"min\", \"max\"])/1e6\n\n#>                      min          max\n#> continent year                       \n#> Africa    1952  0.060011    33.119096\n#>           1957  0.061325    37.173340\n#>           1962  0.065345    41.871351\n#>           1967  0.070787    47.287752\n#>           1972  0.076595    53.740085\n#>           1977  0.086796    62.209173\n#>           1982  0.098593    73.039376\n#>           1987  0.110812    81.551520\n#>           1992  0.125911    93.364244\n#>           1997  0.145608   106.207839\n#>           2002  0.170372   119.901274\n#>           2007  0.199579   135.031164\n#> Americas  1952  0.662850   157.553000\n#>           1957  0.764900   171.984000\n#>           1962  0.887498   186.538000\n#>           1967  0.960155   198.712000\n#>           1972  0.975199   209.896000\n#>           1977  1.039009   220.239000\n#>           1982  1.116479   232.187835\n#>           1987  1.191336   242.803533\n#>           1992  1.183669   256.894189\n#>           1997  1.138101   272.911760\n#>           2002  1.101832   287.675526\n#>           2007  1.056608   301.139947\n#> Asia      1952  0.120447   556.263527\n#>           1957  0.138655   637.408000\n#>           1962  0.171863   665.770000\n#>           1967  0.202182   754.550000\n#>           1972  0.230800   862.030000\n#>           1977  0.297410   943.455000\n#>           1982  0.377967  1000.281000\n#>           1987  0.454612  1084.035000\n#>           1992  0.529491  1164.970000\n#>           1997  0.598561  1230.075000\n#>           2002  0.656397  1280.400000\n#>           2007  0.708573  1318.683096\n#> Europe    1952  0.147962    69.145952\n#>           1957  0.165110    71.019069\n#>           1962  0.182053    73.739117\n#>           1967  0.198676    76.368453\n#>           1972  0.209275    78.717088\n#>           1977  0.221823    78.160773\n#>           1982  0.233997    78.335266\n#>           1987  0.244676    77.718298\n#>           1992  0.259012    80.597764\n#>           1997  0.271192    82.011073\n#>           2002  0.288030    82.350671\n#>           2007  0.301931    82.400996\n#> Oceania   1952  1.994794     8.691212\n#>           1957  2.229407     9.712569\n#>           1962  2.488550    10.794968\n#>           1967  2.728150    11.872264\n#>           1972  2.929100    13.177000\n#>           1977  3.164900    14.074100\n#>           1982  3.210650    15.184200\n#>           1987  3.317166    16.257249\n#>           1992  3.437674    17.481977\n#>           1997  3.676187    18.565243\n#>           2002  3.908037    19.546792\n#>           2007  4.115771    20.434176"
  },
  {
    "objectID": "posts/2022-07-28_data_manipulation_basic/index.html#pivot-wider",
    "href": "posts/2022-07-28_data_manipulation_basic/index.html#pivot-wider",
    "title": "Grammar of Data Manipulation in R and python",
    "section": "10.1 Pivot wider",
    "text": "10.1 Pivot wider\nConvert from long format to wide format. In this tutorial, we want to make a report of each country of life extectancy by years where we want each year to be a column. We can achieve this by pivot gapminder to wide format.\n\nRpython\n\n\nWe use pivot_wider from tidyr package.\n\ngapminder |> pivot_wider(\n  id_cols = c(\"continent\", \"country\"), \n  names_from = \"year\",\n  values_from = \"lifeExp\")\n\n#> # A tibble: 142 × 14\n#>    continent country     `1952` `1957` `1962` `1967` `1972` `1977` `1982` `1987`\n#>    <fct>     <fct>        <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n#>  1 Asia      Afghanistan   28.8   30.3   32.0   34.0   36.1   38.4   39.9   40.8\n#>  2 Europe    Albania       55.2   59.3   64.8   66.2   67.7   68.9   70.4   72  \n#>  3 Africa    Algeria       43.1   45.7   48.3   51.4   54.5   58.0   61.4   65.8\n#>  4 Africa    Angola        30.0   32.0   34     36.0   37.9   39.5   39.9   39.9\n#>  5 Americas  Argentina     62.5   64.4   65.1   65.6   67.1   68.5   69.9   70.8\n#>  6 Oceania   Australia     69.1   70.3   70.9   71.1   71.9   73.5   74.7   76.3\n#>  7 Europe    Austria       66.8   67.5   69.5   70.1   70.6   72.2   73.2   74.9\n#>  8 Asia      Bahrain       50.9   53.8   56.9   59.9   63.3   65.6   69.1   70.8\n#>  9 Asia      Bangladesh    37.5   39.3   41.2   43.5   45.3   46.9   50.0   52.8\n#> 10 Europe    Belgium       68     69.2   70.2   70.9   71.4   72.8   73.9   75.4\n#> # … with 132 more rows, and 4 more variables: `1992` <dbl>, `1997` <dbl>,\n#> #   `2002` <dbl>, `2007` <dbl>\n\n\n\n\nWe use pivot method from pandas package.\n\ngapminder.pivot(\n  index = [\"continent\", \"country\"], \n  columns = \"year\", \n  values = \"lifeExp\"\n  )\n\n#> year                        1952    1957    1962  ...    1997    2002    2007\n#> continent country                                 ...                        \n#> Africa    Algeria         43.077  45.685  48.303  ...  69.152  70.994  72.301\n#>           Angola          30.015  31.999  34.000  ...  40.963  41.003  42.731\n#>           Benin           38.223  40.358  42.618  ...  54.777  54.406  56.728\n#>           Botswana        47.622  49.618  51.520  ...  52.556  46.634  50.728\n#>           Burkina Faso    31.975  34.906  37.814  ...  50.324  50.650  52.295\n#> ...                          ...     ...     ...  ...     ...     ...     ...\n#> Europe    Switzerland     69.620  70.560  71.320  ...  79.370  80.620  81.701\n#>           Turkey          43.585  48.079  52.098  ...  68.835  70.845  71.777\n#>           United Kingdom  69.180  70.420  70.760  ...  77.218  78.471  79.425\n#> Oceania   Australia       69.120  70.330  70.930  ...  78.830  80.370  81.235\n#>           New Zealand     69.390  70.260  71.240  ...  77.550  79.110  80.204\n#> \n#> [142 rows x 12 columns]"
  },
  {
    "objectID": "posts/2022-07-28_data_manipulation_basic/index.html#pivot-longer",
    "href": "posts/2022-07-28_data_manipulation_basic/index.html#pivot-longer",
    "title": "Grammar of Data Manipulation in R and python",
    "section": "10.2 Pivot longer",
    "text": "10.2 Pivot longer\nConvert from wide format to long format. In this tutorial, we want to normalize gapminder table by moving measurment variables including lifeExp pop and gdpPercap columns into longer format where there is a column to store the variable name and a column store their value. We can achieve this by pivot gapminder to long format.\n\nRpython\n\n\nWe use pivot_longer from tidyr package.\n\ngapminder |> pivot_longer(\n  cols = c(\"lifeExp\", \"pop\", \"gdpPercap\"), \n  names_to  = \"variable\",\n  values_to = \"value\")\n\n#> # A tibble: 5,112 × 5\n#>    country     continent  year variable       value\n#>    <fct>       <fct>     <int> <chr>          <dbl>\n#>  1 Afghanistan Asia       1952 lifeExp         28.8\n#>  2 Afghanistan Asia       1952 pop        8425333  \n#>  3 Afghanistan Asia       1952 gdpPercap      779. \n#>  4 Afghanistan Asia       1957 lifeExp         30.3\n#>  5 Afghanistan Asia       1957 pop        9240934  \n#>  6 Afghanistan Asia       1957 gdpPercap      821. \n#>  7 Afghanistan Asia       1962 lifeExp         32.0\n#>  8 Afghanistan Asia       1962 pop       10267083  \n#>  9 Afghanistan Asia       1962 gdpPercap      853. \n#> 10 Afghanistan Asia       1967 lifeExp         34.0\n#> # … with 5,102 more rows\n\n\n\n\nWe use melt method from pandas package.\n\ngapminder.melt(\n  id_vars = [\"country\", \"continent\", \"year\"],\n  value_vars = [\"lifeExp\", \"pop\", \"gdpPercap\"], \n  var_name = \"variable\", \n  value_name = \"value\"\n  )\n\n#>           country continent  year   variable       value\n#> 0     Afghanistan      Asia  1952    lifeExp   28.801000\n#> 1     Afghanistan      Asia  1957    lifeExp   30.332000\n#> 2     Afghanistan      Asia  1962    lifeExp   31.997000\n#> 3     Afghanistan      Asia  1967    lifeExp   34.020000\n#> 4     Afghanistan      Asia  1972    lifeExp   36.088000\n#> ...           ...       ...   ...        ...         ...\n#> 5107     Zimbabwe    Africa  1987  gdpPercap  706.157306\n#> 5108     Zimbabwe    Africa  1992  gdpPercap  693.420786\n#> 5109     Zimbabwe    Africa  1997  gdpPercap  792.449960\n#> 5110     Zimbabwe    Africa  2002  gdpPercap  672.038623\n#> 5111     Zimbabwe    Africa  2007  gdpPercap  469.709298\n#> \n#> [5112 rows x 5 columns]"
  },
  {
    "objectID": "posts/2022-07-28_data_manipulation_basic/index.html#useful-resource",
    "href": "posts/2022-07-28_data_manipulation_basic/index.html#useful-resource",
    "title": "Grammar of Data Manipulation in R and python",
    "section": "12.1 Useful resource:",
    "text": "12.1 Useful resource:\n\nhttps://homepage.divms.uiowa.edu/~luke/classes/STAT4580/dplyr.html#grouped-mutate-and-filter\nhttps://dplyr.tidyverse.org\nhttps://tidyr.tidyverse.org/\nhttps://r4ds.had.co.nz/\nhttps://wesmckinney.com/book/\nhttps://www.rstudio.com/resources/cheatsheets/\nhttps://pandas.pydata.org/Pandas_Cheat_Sheet.pdf"
  },
  {
    "objectID": "posts/2022-07-30_echarts_gapminder/index.html#what-is-echarts",
    "href": "posts/2022-07-30_echarts_gapminder/index.html#what-is-echarts",
    "title": "How to make the animated gapminder chart using R and echarts",
    "section": "What is echarts ?",
    "text": "What is echarts ?\necharts is an open-source javascript for interactive visualization project. Like others javascript visualization libraries, it requies json data and render into interactive visualization object."
  },
  {
    "objectID": "posts/2022-07-30_echarts_gapminder/index.html#what-is-echarts4r",
    "href": "posts/2022-07-30_echarts_gapminder/index.html#what-is-echarts4r",
    "title": "How to make the animated gapminder chart using R and echarts",
    "section": "What is echarts4r?",
    "text": "What is echarts4r?\necharts4r is R package developed by John Coene. echarts4r allow R users to generate echarts visualization by simply writing a R code. As John mentioned, json data is pretty much a list in R language. So the goal is to make a nested list that echarts required. echarts4r provide helper functions to create echart graphic. However, we can make our own R functions or arguements for full customization. See echarts document.\nIf you are new to echarts4r, please see package document."
  },
  {
    "objectID": "posts/2022-07-30_echarts_gapminder/index.html#data",
    "href": "posts/2022-07-30_echarts_gapminder/index.html#data",
    "title": "How to make the animated gapminder chart using R and echarts",
    "section": "Data",
    "text": "Data\nFirst, let preview our data gapminder. There are 6 variables: country, continent, year, LifeExp, pop, and gdpPercap. It contains data from 142 countries ranging from 1952-2007.\n\ngapminder\n\n#> # A tibble: 1,704 × 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Afghanistan Asia       1957    30.3  9240934      821.\n#>  3 Afghanistan Asia       1962    32.0 10267083      853.\n#>  4 Afghanistan Asia       1967    34.0 11537966      836.\n#>  5 Afghanistan Asia       1972    36.1 13079460      740.\n#>  6 Afghanistan Asia       1977    38.4 14880372      786.\n#>  7 Afghanistan Asia       1982    39.9 12881816      978.\n#>  8 Afghanistan Asia       1987    40.8 13867957      852.\n#>  9 Afghanistan Asia       1992    41.7 16317921      649.\n#> 10 Afghanistan Asia       1997    41.8 22227415      635.\n#> # … with 1,694 more rows\n\ngapminder |> count(country)\n\n#> # A tibble: 142 × 2\n#>    country         n\n#>    <fct>       <int>\n#>  1 Afghanistan    12\n#>  2 Albania        12\n#>  3 Algeria        12\n#>  4 Angola         12\n#>  5 Argentina      12\n#>  6 Australia      12\n#>  7 Austria        12\n#>  8 Bahrain        12\n#>  9 Bangladesh     12\n#> 10 Belgium        12\n#> # … with 132 more rows\n\ngapminder |> count(year)\n\n#> # A tibble: 12 × 2\n#>     year     n\n#>    <int> <int>\n#>  1  1952   142\n#>  2  1957   142\n#>  3  1962   142\n#>  4  1967   142\n#>  5  1972   142\n#>  6  1977   142\n#>  7  1982   142\n#>  8  1987   142\n#>  9  1992   142\n#> 10  1997   142\n#> 11  2002   142\n#> 12  2007   142"
  },
  {
    "objectID": "posts/2022-07-30_echarts_gapminder/index.html#echarts-and-timeline",
    "href": "posts/2022-07-30_echarts_gapminder/index.html#echarts-and-timeline",
    "title": "How to make the animated gapminder chart using R and echarts",
    "section": "echarts and timeline",
    "text": "echarts and timeline\nNow, create an echarts object and assign to p variable. This will create an empty canvas with time slider. We also use jsonedit function from listviewer to see the nested list used by echarts. Note that we map gdpPercap to x axis.\n\np <- gapminder |>\n  group_by(year) |>\n  e_charts(gdpPercap, timeline = TRUE)\np\n\n\n\n\n# check object$x$data for data stored in echarts object\n# check object$x$opts$options for data used for visualization\njsonedit(p)\n\n\n\n\n\nAs we can see, that group_by function divide gapminder dataframe by year, so there are 12 dataframes corresponding to a particular year. Explore the list via the result from jsonedit, check object$x$data and object$x$opts$options. We couls see that both have 12 elements. You can check the differences when we do not use group_by.\n\np2 <- gapminder |>\n  e_charts(gdpPercap)\np2\n\n\n\n\n# check object$x$data and object$x$opts$options\njsonedit(p2)"
  },
  {
    "objectID": "posts/2022-07-30_echarts_gapminder/index.html#e_add",
    "href": "posts/2022-07-30_echarts_gapminder/index.html#e_add",
    "title": "How to make the animated gapminder chart using R and echarts",
    "section": "e_add",
    "text": "e_add\nFirst, we use create a new column called color which has associated hex color for each continent. Then, we use e_add_nested by assigning color column to itemStyle keyword. Lastly, we turn on the legend using e_legend(show = TRUE).\n\n# create a named vector for mapping continents to colors\ncontinent_colors <- c(\n  \"Asia\" = \"#ff5872\",\n  \"Europe\" = \"#00d5e9\",\n  \"Africa\" = \"#009f3d\",\n  \"Americas\" = \"#fac61b\",\n  \"Oceania\" = \"#442288\"\n)\n\np3 <- gapminder |>\n  mutate(color = continent_colors[as.character(continent)]) |>\n  group_by(year) |>\n  e_charts(gdpPercap, timeline = TRUE) |>\n  e_scatter(\n    lifeExp,\n    pop,\n    symbol_size = 5,\n    bind = country,\n    legend = FALSE,\n    emphasis = list(focus = 'self')\n  ) |>\n  e_x_axis(\n    name = 'GDP per capita',\n    nameLocation = 'center',\n    type = \"log\",\n    min = 100,\n    max = 2e5,\n  ) |>\n  e_y_axis(\n    name = \"Life Expectancy\",\n    max = 100\n  ) |>\n  e_add_nested(\"itemStyle\", color) |>\n  e_legend(show = TRUE)\np3\n\n\n\n\n# check object$x$opts$options$0$series$0$data$0\njsonedit(p3)\n\n\n\n\n\nAs we can see from above graphic, we have defined color for each continent. However, there is one problem which is the legend represents the series of the scatter plot which is shown as lifeExp. To add a legend for color mapping, we need to use e_visual_map.\nAs far as I know, e_visual_map use dimension that the value inside the series i.e. using jsonedit and dig into object$x$opts$0$series$0$data$0$value as seen in below figure. Now, we have 4 values per each country per year including gdpPercap, lifeExp, pop and size. We need to add continent as the fifth value. Then we can use e_visual_map\nNow, let’s try by add color column in value via e_add_nested(\"value\", color)\n\np4 <- gapminder |>\n  mutate(color = continent_colors[as.character(continent)]) |>\n  group_by(year) |>\n  e_charts(gdpPercap, timeline = TRUE) |>\n  e_scatter(\n    lifeExp,\n    pop,\n    symbol_size = 5,\n    bind = country,\n    legend = FALSE,\n    emphasis = list(focus = 'self')\n  ) |>\n  e_x_axis(\n    name = 'GDP per capita',\n    nameLocation = 'center',\n    type = \"log\",\n    min = 100,\n    max = 2e5,\n  ) |>\n  e_y_axis(\n    name = \"Life Expectancy\",\n    max = 100\n  ) |>\n  e_add_nested(\"value\", color) # add color to series value\np4\n\n\n\n\n# check object$x$opts$options$0$series$0$data$0\njsonedit(p4)\n\n\n\n\n\nThe result is that e_add_nested replace the original value with color. You could try e_add_nested(\"value\", gdpPercap, lifeExp, pop, color) but it would not render due to its value become named vector."
  },
  {
    "objectID": "posts/2022-07-30_echarts_gapminder/index.html#e_add_value",
    "href": "posts/2022-07-30_echarts_gapminder/index.html#e_add_value",
    "title": "How to make the animated gapminder chart using R and echarts",
    "section": "e_add_value",
    "text": "e_add_value\nTherefore, my solution is to have another function that can keep series’ value and add value from specific column(s).\n\ne_add_value <- function(e, ...) {\n\n  for (i in seq_along(e$x$data)) {\n    # extract data to be added\n    data <- e$x$data[[i]] |>\n      dplyr::select(...) |>\n      apply(1, as.list)\n\n    for (j in seq_along(data)) {\n      data_append <- data[[j]] |> unname()\n      if (!e$x$tl) { # if timeline is not used\n        # get data from current echart object\n        data_origin <- e$x$opts$series[[i]]$data[[j]][[\"value\"]]\n        # append data from selection\n        data_new <- list(data_origin, data_append) |> flatten() |> list()\n        # assign to echart object\n        e$x$opts$series[[i]]$data[[j]][\"value\"] <- data_new\n      } else { # if timeline is used\n        # get data from current echart object\n        data_origin <- e$x$opts$options[[i]]$series[[1]]$data[[j]][[\"value\"]]\n        # append data from selection\n        data_new <- list(data_origin, data_append) |> flatten() |> list()\n        # assign to echart object\n        e$x$opts$options[[i]]$series[[1]]$data[[j]][\"value\"] <- data_new   \n      }\n    }\n  }\n  e\n}\n\n\n\n\n\n\n\nNote\n\n\n\n\njson data structure are different when timeline is used or not.\nWhen timeline is not used.\n\ni is one.\nj is the number of rows.\n\nWhen timeline is used\n\ni is the number of grouped dataframe.\nj is the number of rows of each group.\n\nIt could be better alternative solutions, but this one works for me."
  },
  {
    "objectID": "posts/2022-07-30_echarts_gapminder/index.html#continents-to-colors",
    "href": "posts/2022-07-30_echarts_gapminder/index.html#continents-to-colors",
    "title": "How to make the animated gapminder chart using R and echarts",
    "section": "continents to colors",
    "text": "continents to colors\nNow, let’s see the result.\n\np <- p |>\n  e_add_value(continent) |>\n  e_visual_map(\n    type = \"piecewise\", # discrete/categorial variable\n    dimension = 4, # in java first element start with 0\n    categories = names(continent_colors), # label\n    inRange = list(color = unname(continent_colors)), # hex color\n    orient = \"horizontal\", # apperance\n    top = \"9%\", # apperance\n    left = \"center\" # apperance\n  )\np\n\n\n\n\n# check object$x$opts$baseOption$visualMap for legend\njsonedit(p)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen we hover over a continent on the legend, all data from selected continent are highlighted."
  },
  {
    "objectID": "posts/2022-07-30_echarts_gapminder/index.html#title-in-echarts-timeframe",
    "href": "posts/2022-07-30_echarts_gapminder/index.html#title-in-echarts-timeframe",
    "title": "How to make the animated gapminder chart using R and echarts",
    "section": "title in echarts timeframe",
    "text": "title in echarts timeframe\nDefine a helper function to append a title to echarts. I modify e_title as follows.\n\ne_title_timeline <- function (e, title) {\n  # loop over group_by data\n  for (i in 1:length(e$x$opts$options)) {\n    # append original title with new title\n    e$x$opts$options[[i]][[\"title\"]] <- append(\n      e$x$opts$options[[i]][[\"title\"]], title[i]\n    )\n  }\n  e\n}\n\nCreate two lists: one for main title and one for annotating year.\n\n# main title\ntitle_main <- map(\n  as.character(gapminder$year) |> unique(),\n  function(x) {\n    list(\n      text = paste0(\"GDP per Capita and Life Expectancy in \", x),\n      left = \"0%\",\n      top = \"0%\",\n      textStyle = list(fontSize = 18)\n    )\n  }\n)\n\n# time title for annotation\ntitle_year <- map(\n  as.character(gapminder$year) |> unique(),\n  function(x) {\n    list(\n      text = x,\n      right = \"15%\", \n      bottom = \"15%\",\n      textStyle = list(fontSize = 60)\n    )\n  }\n)"
  },
  {
    "objectID": "posts/2022-07-30_echarts_gapminder/index.html#add-titles-and-toolbox",
    "href": "posts/2022-07-30_echarts_gapminder/index.html#add-titles-and-toolbox",
    "title": "How to make the animated gapminder chart using R and echarts",
    "section": "Add titles and toolbox",
    "text": "Add titles and toolbox\n\np <- p |>\n  e_title_timeline(title = title_main) |>\n  e_title_timeline(title = title_year) |>\n  e_toolbox_feature(feature = c(\"saveAsImage\", \"dataZoom\", \"restore\"))\np\n\n\n\n\n# check object$x$opts$baseOption$toolbox for toolbox\n# check object$x$opts$options$0$title for title\njsonedit(p)"
  },
  {
    "objectID": "projects/mapthai/index.html",
    "href": "projects/mapthai/index.html",
    "title": "Mapthai",
    "section": "",
    "text": "mapthai package link"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Project",
    "section": "",
    "text": "R package\n\n\nmap\n\n\n\nR package providing map polygon of Thailand.\n\n\n\nPiyayut Chitchumnong\n\n\nJul 9, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  }
]